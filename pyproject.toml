[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=77",
]

[project]
name = "django-check"
version = "0.1.0"
description = "Some useful hooks for Django development"
authors = [
    {name = "Aleksandr Sapronov", email = "a@sapronov.me"},
    {name = "Ivan Vedernikov", email = "ecugol@gmail.com"}
]
readme = "README.md"
requires-python = ">=3.10,<4.0"
license = {text = "MIT"}
keywords = ["django", "hooks", "pre-commit"]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]

dependencies = [
    "django (>=5.0) ; python_version >= '3.10' and python_version < '4.0'",
    "django (>=4.2) ; python_version >= '3.9' and python_version < '4.0'",
    "celery (>=5.5.3,<6.0.0)",
    "sentry-sdk (>=2.35.2,<3.0.0)",
    "django-environ (>=0.12.0,<0.13.0)",
    "django-split-settings (>=1.3.2,<2.0.0)"
]

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.1"
pytest-cov = "^6.2.1"
coverage = "^7.10.6"
covdefaults = "^2.3.0"
ruff = "^0.12.11"
flake8 = "^7.3.0"
pre-commit = "^4.3.0"

[project.urls]
Homepage = "https://github.com/Incidenta-tech/django-check"
Repository = "https://github.com/Incidenta-tech/django-check"

[project.scripts]
check-untracked-migrations = "hooks.check_untracked_migrations:main"
check-debug-mode = "hooks.check_debug_mode:main"
po-location-format = "hooks.po_location_format:main"

[tool.setuptools]
packages = ["hooks"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "migrations",
]

# Same as Black.
line-length = 119
indent-width = 4

# Assume Python 3.8
target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F", "I"]
ignore = ["F811"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.isort]
force-single-line = true

[tool.coverage.run]
plugins = ["covdefaults"]

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true

[[tool.mypy.overrides]]
module = "testing.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
